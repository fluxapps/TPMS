<?php

namespace srag\Plugins\TPMS\Job;

use Exception;
use ilCronJob;
use ilCronJobResult;
use ilTPMSPlugin;
use ilXmlWriter;
use srag\CQRS\TPMS\Projection\Persistence\ilDBPositionLedger;
use srag\CQRS\TPMS\Projection\Projectionist;
use srag\CQRS\TPMS\Projection\ProjectorCollection;
use srag\DIC\TPMS\DICTrait;
use srag\Plugins\TPMS\EventHandling\Infrastructure\Persistence\ilDBEventStore;
use srag\Plugins\TPMS\EventHandling\Projection\LearningProgressProjector;
use srag\Plugins\TPMS\EventHandling\Projection\LearningProgressXMLProjection;
use srag\Plugins\TPMS\Utils\TPMSTrait;
use srag\Plugins\TPMS\Config\Repository as ConfigRepository;
use srag\Plugins\TPMS\Exception\TPMSException;
use phpseclib\Net\SFTP;
use ILIAS\Filesystem\Exception\IOException;
use ILIAS\Filesystem\Exception\FileNotFoundException;
use ILIAS\Filesystem\Exception\FileAlreadyExistsException;

/**
 * Class Job
 *
 * Generated by SrPluginGenerator v1.3.5
 *
 * @package srag\Plugins\TPMS\Job
 *
 * @author  studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 */
class Job extends ilCronJob
{

    use DICTrait;
    use TPMSTrait;
    const CRON_JOB_ID = ilTPMSPlugin::PLUGIN_ID . "_cron";
    const PLUGIN_CLASS_NAME = ilTPMSPlugin::class;

    const XML_TAG_LEARNING_RECORDS = 'LearningRecords';
    const SFTP_HOST = 'TPMS_SFTP_HOST';
    const SFTP_USER = 'TPMS_SFTP_USER';
    const SFTP_PASSWORD = 'TPMS_SFTP_PASSWORD';


    /**
     * Job constructor
     */
    public function __construct()
    {

    }


    /**
     * @inheritDoc
     */
    public function getId() : string
    {
        return self::CRON_JOB_ID;
    }


    /**
     * @inheritDoc
     */
    public function getTitle() : string
    {
        return ilTPMSPlugin::PLUGIN_NAME;
    }


    /**
     * @inheritDoc
     */
    public function getDescription() : string
    {
        return self::plugin()->translate('description', 'cronjob');
    }


    /**
     * @inheritDoc
     */
    public function hasAutoActivation() : bool
    {
        return true;
    }


    /**
     * @inheritDoc
     */
    public function hasFlexibleSchedule() : bool
    {
        return true;
    }


    /**
     * @inheritDoc
     */
    public function getDefaultScheduleType() : int
    {
        return self::SCHEDULE_TYPE_DAILY;
    }


    /**
     * @inheritDoc
     */
    public function getDefaultScheduleValue()/*:?int*/
    {
        return null;
    }


    /**
     * @inheritDoc
     * @throws Exception
     */
    public function run() : ilCronJobResult
    {
        $result = new ilCronJobResult();

        $xml_writer = new ilXMLWriter();
        $xml_writer->xmlHeader();
        $xml_writer->xmlStartTag(self::XML_TAG_LEARNING_RECORDS);

        $LearningProgressXMLProjection = new LearningProgressXMLProjection(self::dic()->databaseCore(), $xml_writer);
        $LearningProgressProjector = new LearningProgressProjector($LearningProgressXMLProjection);

        $ledger = new ilDBPositionLedger(self::dic()->databaseCore());
        $position = $ledger->fetch($LearningProgressProjector);
        if (!is_null($position) && $position->isFailing()) { // reset if failed
            $position = $position->fixed();
            $ledger->store($position);
        }

        $Projectionist = new Projectionist(
            $ledger,
            new ilDBEventStore(),
            self::dic()->logger()->root()
        );
        $Projectionist->playProjectors(new ProjectorCollection([$LearningProgressProjector]));

        $xml_writer->xmlEndTag(self::XML_TAG_LEARNING_RECORDS);

        $xml_content = $xml_writer->xmlStr;

        if (strpos($xml_content, LearningProgressXMLProjection::TAG_RECORD) !== false) { // has written anything
            $this->sendXMLViaSFTP($xml_content);
            $result->setStatus(ilCronJobResult::STATUS_OK);
        } else {
            $result->setStatus(ilCronJobResult::STATUS_NO_ACTION);
        }


        return $result;
    }

    /**
     * @param string $xml_content
     * @throws TPMSException
     */
    protected function sendXMLViaSFTP(string $xml_content)
    {
        $sftp = new SFTP(getenv(self::SFTP_HOST));
        if (!$sftp->login(getenv(self::SFTP_USER), getenv(self::SFTP_PASSWORD))) {
            throw new TPMSException('Login via SFTP failed'.' '.getenv(self::SFTP_HOST));
        }


        $sftp->chdir('working');
        $sftp->put('ilias_learning_records_ ' . date('Ymd', time()) . '.xml', $xml_content);

        // cleanup
        $seven_days_ago = (int) date('Ymd', time() - (7 * 24 * 60 * 60));
        foreach ($sftp->rawlist() as $file) {
            $filename = $file['filename'];
            $from = strpos($filename, '.xml');
            if ($from !== false) {
                $date = (int) substr($filename, $from - 8, 8);
                if ($date <= $seven_days_ago) { // older than 7 days
                    $sftp->delete($filename);
                }
            }
        }

        $sftp->disconnect();
    }

    /**
     * Send file to configured url. Not used at the moment, since we send the files via sftp
     * @param string $xml_content
     * @throws TPMSException
     * @throws FileAlreadyExistsException
     * @throws FileNotFoundException
     * @throws IOException
     */
    protected function sendXMLViaCURL(string $xml_content)
    {
        $file_path = 'tpms.xml';
        if (self::dic()->filesystem()->temp()->has($file_path)) {
            self::dic()->filesystem()->temp()->delete($file_path);
        }
        self::dic()->filesystem()->temp()->write($file_path, $xml_content);

        // initialise the curl request
        $request = curl_init(ConfigRepository::getInstance()->getUrl());

        // send a file
        curl_setopt($request, CURLOPT_POST, true);
        curl_setopt(
            $request,
            CURLOPT_POSTFIELDS,
            array(
                'file' => '@' . $file_path
            ));

        // output the response
        curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($request);
        $status = curl_getinfo($request, CURLINFO_HTTP_CODE);

        // close the session
        curl_close($request);

        if ($status > 299) {
            throw new TPMSException('sending file returned HTTP status ' . $status . ' with response: ' . $response);
        }
        self::dic()->filesystem()->temp()->delete($file_path);
    }
}
