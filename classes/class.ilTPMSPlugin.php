<?php

require_once __DIR__ . "/../vendor/autoload.php";

use srag\CQRS\TPMS\Aggregate\DomainObjectId;
use srag\Plugins\TPMS\EventHandling\Event\LearningProgressCourseUpdated;
use srag\Plugins\TPMS\EventHandling\Infrastructure\Persistence\ilDBEventStore;
use srag\Plugins\TPMS\EventHandling\ValueObject\LearningProgress;
use srag\Plugins\TPMS\Exception\TPMSException;
use srag\Plugins\TPMS\Utils\TPMSTrait;

/**
 * Class ilTPMSPlugin
 *
 * Generated by SrPluginGenerator v1.3.5
 *
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 */
class ilTPMSPlugin extends ilCronHookPlugin
{
    use TPMSTrait;
    const PLUGIN_ID = "tpms";
    const PLUGIN_NAME = "TPMS";
    const PLUGIN_CLASS_NAME = self::class;
    /**
     * @var self|null
     */
    protected static $instance = null;


    /**
     * @return self
     */
    public static function getInstance() : self
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }


    /**
     * ilTPMSPlugin constructor
     */
    public function __construct()
    {
        parent::__construct();
    }


    /**
     * @param $a_component
     * @param $a_event
     * @param $a_parameter
     *
     * @throws TPMSException
     * @throws ilDateTimeException
     * @throws Exception
     */
    public function handleEvent($a_component, $a_event, $a_parameter)
    {
        switch ($a_component) {
            case 'Modules/Course':
                switch ($a_event) {
                    case 'participantHasPassedCourse':
                        $this->storeLPUpdated($a_parameter['usr_id'], $a_parameter['obj_id'], LearningProgress::LP_STATUS_COMPLETED_NUM);
                }
                break;
            case 'Services/Tracking':
                switch ($a_event) {
                    case 'updateStatus':
                        if (ilObject::_lookupType($a_parameter['obj_id']) === 'crs') {
                            $this->storeLPUpdated($a_parameter['usr_id'], $a_parameter['obj_id'], $a_parameter['status'], $a_parameter['percentage']);
                        }
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
    }

    /**
     * @inheritDoc
     */
    public function getPluginName() : string
    {
        return self::PLUGIN_NAME;
    }


    /**
     * @inheritDoc
     */
    public function getCronJobInstances() : array
    {
        return self::TPMS()->jobs()->factory()->newInstances();
    }


    /**
     * @inheritDoc
     */
    public function getCronJobInstance(/*string*/ $a_job_id)/*: ?ilCronJob*/
    {
        return self::TPMS()->jobs()->factory()->newInstanceById($a_job_id);
    }


    /**
     * @inheritDoc
     */
    public function updateLanguages(/*?array*/ $a_lang_keys = null)/*:void*/
    {
        parent::updateLanguages($a_lang_keys);
    }


    /**
     * @inheritDoc
     */
    protected function deleteData()/*: void*/
    {
        self::TPMS()->dropTables();
    }


    /**
     * @param $usr_id int
     * @param $obj_id int
     *
     * @return int
     */
    protected function getTimeSpent(int $usr_id, int $obj_id) : int
    {
        $login = ilObjUser::_lookupLogin($usr_id);
        $references = ilObject::_getAllReferences($obj_id);
        $ref_id = array_shift($references);
        $data = ilTrQuery::getUserDataForObject(
            $ref_id,
            '',
            '',
            0,
            9999,
            ['login' => $login],
            ['spent_seconds'],
            false,
            []
        );

        $spent_seconds = 0;
        if (is_array($data['set']) && count($data['set']) > 0) {
            foreach ($data['set'] as $dataset) {
                if ((int) $dataset['usr_id'] === $usr_id) {
                    $spent_seconds = (int) $dataset['spent_seconds'];
                    break;
                }
            }
        }

        return $spent_seconds;
    }


    /**
     * @param int      $usr_id
     * @param int      $obj_id
     * @param int      $lp_status
     * @param int|null $percentage
     *
     * @throws TPMSException
     * @throws ilDateTimeException
     * @throws Exception
     */
    protected function storeLPUpdated(int $usr_id, int $obj_id, int $lp_status, int $percentage = null)
    {

        $learning_progress = LearningProgress::createNew($lp_status);
        $learning_progress = is_numeric($percentage) ?
        $learning_progress->withPercentage($percentage) : $learning_progress;
        $learning_progress = $learning_progress->withTimeSpent($this->getTimeSpent($usr_id, $obj_id));

        $event_store = new ilDBEventStore();
        $event_store->commitSingle(LearningProgressCourseUpdated::createNew(
            new DomainObjectId($obj_id),
            $usr_id,
            $learning_progress,
            self::dic()->user()->getId()
        ));
    }
}
